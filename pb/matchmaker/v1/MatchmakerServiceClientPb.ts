/**
 * @fileoverview gRPC-Web generated client stub for matchmaker.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.32.1
// source: matchmaker/v1/matchmaker.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as matchmaker_v1_matchmaker_pb from '../../matchmaker/v1/matchmaker_pb'; // proto import: "matchmaker/v1/matchmaker.proto"


export class MatchmakerClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetCurrentGame = new grpcWeb.MethodDescriptor(
    '/matchmaker.v1.Matchmaker/GetCurrentGame',
    grpcWeb.MethodType.UNARY,
    matchmaker_v1_matchmaker_pb.GetCurrentGameRequest,
    matchmaker_v1_matchmaker_pb.GetCurrentGameResponse,
    (request: matchmaker_v1_matchmaker_pb.GetCurrentGameRequest) => {
      return request.serializeBinary();
    },
    matchmaker_v1_matchmaker_pb.GetCurrentGameResponse.deserializeBinary
  );

  getCurrentGame(
    request: matchmaker_v1_matchmaker_pb.GetCurrentGameRequest,
    metadata?: grpcWeb.Metadata | null): Promise<matchmaker_v1_matchmaker_pb.GetCurrentGameResponse>;

  getCurrentGame(
    request: matchmaker_v1_matchmaker_pb.GetCurrentGameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: matchmaker_v1_matchmaker_pb.GetCurrentGameResponse) => void): grpcWeb.ClientReadableStream<matchmaker_v1_matchmaker_pb.GetCurrentGameResponse>;

  getCurrentGame(
    request: matchmaker_v1_matchmaker_pb.GetCurrentGameRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: matchmaker_v1_matchmaker_pb.GetCurrentGameResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/matchmaker.v1.Matchmaker/GetCurrentGame',
        request,
        metadata || {},
        this.methodDescriptorGetCurrentGame,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/matchmaker.v1.Matchmaker/GetCurrentGame',
    request,
    metadata || {},
    this.methodDescriptorGetCurrentGame);
  }

  methodDescriptorJoinGame = new grpcWeb.MethodDescriptor(
    '/matchmaker.v1.Matchmaker/JoinGame',
    grpcWeb.MethodType.SERVER_STREAMING,
    matchmaker_v1_matchmaker_pb.JoinGameRequest,
    matchmaker_v1_matchmaker_pb.JoinUpdate,
    (request: matchmaker_v1_matchmaker_pb.JoinGameRequest) => {
      return request.serializeBinary();
    },
    matchmaker_v1_matchmaker_pb.JoinUpdate.deserializeBinary
  );

  joinGame(
    request: matchmaker_v1_matchmaker_pb.JoinGameRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<matchmaker_v1_matchmaker_pb.JoinUpdate> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/matchmaker.v1.Matchmaker/JoinGame',
      request,
      metadata || {},
      this.methodDescriptorJoinGame);
  }

}

