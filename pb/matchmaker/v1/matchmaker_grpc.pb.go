// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: matchmaker/v1/matchmaker.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaker_GetCurrentGame_FullMethodName = "/matchmaker.v1.Matchmaker/GetCurrentGame"
	Matchmaker_JoinGame_FullMethodName       = "/matchmaker.v1.Matchmaker/JoinGame"
)

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakerClient interface {
	GetCurrentGame(ctx context.Context, in *GetCurrentGameRequest, opts ...grpc.CallOption) (*GetCurrentGameResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinUpdate], error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) GetCurrentGame(ctx context.Context, in *GetCurrentGameRequest, opts ...grpc.CallOption) (*GetCurrentGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentGameResponse)
	err := c.cc.Invoke(ctx, Matchmaker_GetCurrentGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JoinUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Matchmaker_ServiceDesc.Streams[0], Matchmaker_JoinGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinGameRequest, JoinUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaker_JoinGameClient = grpc.ServerStreamingClient[JoinUpdate]

// MatchmakerServer is the server API for Matchmaker service.
// All implementations must embed UnimplementedMatchmakerServer
// for forward compatibility.
type MatchmakerServer interface {
	GetCurrentGame(context.Context, *GetCurrentGameRequest) (*GetCurrentGameResponse, error)
	JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinUpdate]) error
	mustEmbedUnimplementedMatchmakerServer()
}

// UnimplementedMatchmakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServer struct{}

func (UnimplementedMatchmakerServer) GetCurrentGame(context.Context, *GetCurrentGameRequest) (*GetCurrentGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentGame not implemented")
}
func (UnimplementedMatchmakerServer) JoinGame(*JoinGameRequest, grpc.ServerStreamingServer[JoinUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedMatchmakerServer) mustEmbedUnimplementedMatchmakerServer() {}
func (UnimplementedMatchmakerServer) testEmbeddedByValue()                    {}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_GetCurrentGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).GetCurrentGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_GetCurrentGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).GetCurrentGame(ctx, req.(*GetCurrentGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_JoinGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakerServer).JoinGame(m, &grpc.GenericServerStream[JoinGameRequest, JoinUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaker_JoinGameServer = grpc.ServerStreamingServer[JoinUpdate]

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaker.v1.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentGame",
			Handler:    _Matchmaker_GetCurrentGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinGame",
			Handler:       _Matchmaker_JoinGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaker/v1/matchmaker.proto",
}
