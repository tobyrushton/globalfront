// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "matchmaker/v1/matchmaker.proto" (package "matchmaker.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Matchmaker } from "./matchmaker";
import type { JoinUpdate } from "./matchmaker";
import type { JoinGameRequest } from "./matchmaker";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetCurrentGameResponse } from "./matchmaker";
import type { GetCurrentGameRequest } from "./matchmaker";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service matchmaker.v1.Matchmaker
 */
export interface IMatchmakerClient {
    /**
     * @generated from protobuf rpc: GetCurrentGame
     */
    getCurrentGame(input: GetCurrentGameRequest, options?: RpcOptions): UnaryCall<GetCurrentGameRequest, GetCurrentGameResponse>;
    /**
     * @generated from protobuf rpc: JoinGame
     */
    joinGame(input: JoinGameRequest, options?: RpcOptions): ServerStreamingCall<JoinGameRequest, JoinUpdate>;
}
/**
 * @generated from protobuf service matchmaker.v1.Matchmaker
 */
export class MatchmakerClient implements IMatchmakerClient, ServiceInfo {
    typeName = Matchmaker.typeName;
    methods = Matchmaker.methods;
    options = Matchmaker.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCurrentGame
     */
    getCurrentGame(input: GetCurrentGameRequest, options?: RpcOptions): UnaryCall<GetCurrentGameRequest, GetCurrentGameResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCurrentGameRequest, GetCurrentGameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: JoinGame
     */
    joinGame(input: JoinGameRequest, options?: RpcOptions): ServerStreamingCall<JoinGameRequest, JoinUpdate> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinGameRequest, JoinUpdate>("serverStreaming", this._transport, method, opt, input);
    }
}
