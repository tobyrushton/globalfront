// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "matchmaker/v1/matchmaker.proto" (package "matchmaker.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Game } from "../../game/v1/game";
/**
 * @generated from protobuf message matchmaker.v1.GetCurrentGameRequest
 */
export interface GetCurrentGameRequest {
}
/**
 * @generated from protobuf message matchmaker.v1.GetCurrentGameResponse
 */
export interface GetCurrentGameResponse {
    /**
     * @generated from protobuf field: game.v1.Game game = 1
     */
    game?: Game;
}
/**
 * @generated from protobuf message matchmaker.v1.JoinGameRequest
 */
export interface JoinGameRequest {
}
/**
 * @generated from protobuf message matchmaker.v1.JoinUpdate
 */
export interface JoinUpdate {
    /**
     * @generated from protobuf oneof: update
     */
    update: {
        oneofKind: "acknowledgement";
        /**
         * @generated from protobuf field: matchmaker.v1.JoinAcknowledgement acknowledgement = 1
         */
        acknowledgement: JoinAcknowledgement;
    } | {
        oneofKind: "serverDetails";
        /**
         * @generated from protobuf field: matchmaker.v1.ServerDetails server_details = 2
         */
        serverDetails: ServerDetails;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: matchmaker.v1.JoinError error = 3
         */
        error: JoinError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message matchmaker.v1.JoinAcknowledgement
 */
export interface JoinAcknowledgement {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * @generated from protobuf message matchmaker.v1.ServerDetails
 */
export interface ServerDetails {
    /**
     * @generated from protobuf field: string address = 1
     */
    address: string;
    /**
     * @generated from protobuf field: int32 port = 2
     */
    port: number;
    /**
     * @generated from protobuf field: string player_id = 3
     */
    playerId: string;
}
/**
 * @generated from protobuf message matchmaker.v1.JoinError
 */
export interface JoinError {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCurrentGameRequest$Type extends MessageType<GetCurrentGameRequest> {
    constructor() {
        super("matchmaker.v1.GetCurrentGameRequest", []);
    }
    create(value?: PartialMessage<GetCurrentGameRequest>): GetCurrentGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCurrentGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCurrentGameRequest): GetCurrentGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCurrentGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.GetCurrentGameRequest
 */
export const GetCurrentGameRequest = new GetCurrentGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCurrentGameResponse$Type extends MessageType<GetCurrentGameResponse> {
    constructor() {
        super("matchmaker.v1.GetCurrentGameResponse", [
            { no: 1, name: "game", kind: "message", T: () => Game }
        ]);
    }
    create(value?: PartialMessage<GetCurrentGameResponse>): GetCurrentGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCurrentGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCurrentGameResponse): GetCurrentGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.v1.Game game */ 1:
                    message.game = Game.internalBinaryRead(reader, reader.uint32(), options, message.game);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCurrentGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.v1.Game game = 1; */
        if (message.game)
            Game.internalBinaryWrite(message.game, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.GetCurrentGameResponse
 */
export const GetCurrentGameResponse = new GetCurrentGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinGameRequest$Type extends MessageType<JoinGameRequest> {
    constructor() {
        super("matchmaker.v1.JoinGameRequest", []);
    }
    create(value?: PartialMessage<JoinGameRequest>): JoinGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<JoinGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinGameRequest): JoinGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.JoinGameRequest
 */
export const JoinGameRequest = new JoinGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinUpdate$Type extends MessageType<JoinUpdate> {
    constructor() {
        super("matchmaker.v1.JoinUpdate", [
            { no: 1, name: "acknowledgement", kind: "message", oneof: "update", T: () => JoinAcknowledgement },
            { no: 2, name: "server_details", kind: "message", oneof: "update", T: () => ServerDetails },
            { no: 3, name: "error", kind: "message", oneof: "update", T: () => JoinError }
        ]);
    }
    create(value?: PartialMessage<JoinUpdate>): JoinUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.update = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<JoinUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinUpdate): JoinUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* matchmaker.v1.JoinAcknowledgement acknowledgement */ 1:
                    message.update = {
                        oneofKind: "acknowledgement",
                        acknowledgement: JoinAcknowledgement.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).acknowledgement)
                    };
                    break;
                case /* matchmaker.v1.ServerDetails server_details */ 2:
                    message.update = {
                        oneofKind: "serverDetails",
                        serverDetails: ServerDetails.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).serverDetails)
                    };
                    break;
                case /* matchmaker.v1.JoinError error */ 3:
                    message.update = {
                        oneofKind: "error",
                        error: JoinError.internalBinaryRead(reader, reader.uint32(), options, (message.update as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* matchmaker.v1.JoinAcknowledgement acknowledgement = 1; */
        if (message.update.oneofKind === "acknowledgement")
            JoinAcknowledgement.internalBinaryWrite(message.update.acknowledgement, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* matchmaker.v1.ServerDetails server_details = 2; */
        if (message.update.oneofKind === "serverDetails")
            ServerDetails.internalBinaryWrite(message.update.serverDetails, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* matchmaker.v1.JoinError error = 3; */
        if (message.update.oneofKind === "error")
            JoinError.internalBinaryWrite(message.update.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.JoinUpdate
 */
export const JoinUpdate = new JoinUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinAcknowledgement$Type extends MessageType<JoinAcknowledgement> {
    constructor() {
        super("matchmaker.v1.JoinAcknowledgement", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinAcknowledgement>): JoinAcknowledgement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<JoinAcknowledgement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinAcknowledgement): JoinAcknowledgement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinAcknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.JoinAcknowledgement
 */
export const JoinAcknowledgement = new JoinAcknowledgement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerDetails$Type extends MessageType<ServerDetails> {
    constructor() {
        super("matchmaker.v1.ServerDetails", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServerDetails>): ServerDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.port = 0;
        message.playerId = "";
        if (value !== undefined)
            reflectionMergePartial<ServerDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerDetails): ServerDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* int32 port */ 2:
                    message.port = reader.int32();
                    break;
                case /* string player_id */ 3:
                    message.playerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* int32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).int32(message.port);
        /* string player_id = 3; */
        if (message.playerId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.playerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.ServerDetails
 */
export const ServerDetails = new ServerDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinError$Type extends MessageType<JoinError> {
    constructor() {
        super("matchmaker.v1.JoinError", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinError>): JoinError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<JoinError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinError): JoinError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matchmaker.v1.JoinError
 */
export const JoinError = new JoinError$Type();
/**
 * @generated ServiceType for protobuf service matchmaker.v1.Matchmaker
 */
export const Matchmaker = new ServiceType("matchmaker.v1.Matchmaker", [
    { name: "GetCurrentGame", options: {}, I: GetCurrentGameRequest, O: GetCurrentGameResponse },
    { name: "JoinGame", serverStreaming: true, options: {}, I: JoinGameRequest, O: JoinUpdate }
]);
