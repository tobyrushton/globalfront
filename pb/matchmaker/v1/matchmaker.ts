/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: matchmaker/v1/matchmaker.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../game/v1/game";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace matchmaker.v1 {
    export class GetCurrentGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetCurrentGameRequest {
            const message = new GetCurrentGameRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCurrentGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCurrentGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCurrentGameRequest {
            return GetCurrentGameRequest.deserialize(bytes);
        }
    }
    export class GetCurrentGameResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            game?: dependency_1.game.v1.Game;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
            }
        }
        get game() {
            return pb_1.Message.getWrapperField(this, dependency_1.game.v1.Game, 1) as dependency_1.game.v1.Game;
        }
        set game(value: dependency_1.game.v1.Game) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            game?: ReturnType<typeof dependency_1.game.v1.Game.prototype.toObject>;
        }): GetCurrentGameResponse {
            const message = new GetCurrentGameResponse({});
            if (data.game != null) {
                message.game = dependency_1.game.v1.Game.fromObject(data.game);
            }
            return message;
        }
        toObject() {
            const data: {
                game?: ReturnType<typeof dependency_1.game.v1.Game.prototype.toObject>;
            } = {};
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game)
                writer.writeMessage(1, this.game, () => this.game.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCurrentGameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCurrentGameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game, () => message.game = dependency_1.game.v1.Game.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCurrentGameResponse {
            return GetCurrentGameResponse.deserialize(bytes);
        }
    }
    export class JoinGameRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): JoinGameRequest {
            const message = new JoinGameRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinGameRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinGameRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinGameRequest {
            return JoinGameRequest.deserialize(bytes);
        }
    }
    export class JoinUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            acknowledgement?: JoinAcknowledgement;
            server_details?: never;
            error?: never;
        } | {
            acknowledgement?: never;
            server_details?: ServerDetails;
            error?: never;
        } | {
            acknowledgement?: never;
            server_details?: never;
            error?: JoinError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("acknowledgement" in data && data.acknowledgement != undefined) {
                    this.acknowledgement = data.acknowledgement;
                }
                if ("server_details" in data && data.server_details != undefined) {
                    this.server_details = data.server_details;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get acknowledgement() {
            return pb_1.Message.getWrapperField(this, JoinAcknowledgement, 1) as JoinAcknowledgement;
        }
        set acknowledgement(value: JoinAcknowledgement) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_acknowledgement() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get server_details() {
            return pb_1.Message.getWrapperField(this, ServerDetails, 2) as ServerDetails;
        }
        set server_details(value: ServerDetails) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_server_details() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, JoinError, 3) as JoinError;
        }
        set error(value: JoinError) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get update() {
            const cases: {
                [index: number]: "none" | "acknowledgement" | "server_details" | "error";
            } = {
                0: "none",
                1: "acknowledgement",
                2: "server_details",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            acknowledgement?: ReturnType<typeof JoinAcknowledgement.prototype.toObject>;
            server_details?: ReturnType<typeof ServerDetails.prototype.toObject>;
            error?: ReturnType<typeof JoinError.prototype.toObject>;
        }): JoinUpdate {
            const message = new JoinUpdate({});
            if (data.acknowledgement != null) {
                message.acknowledgement = JoinAcknowledgement.fromObject(data.acknowledgement);
            }
            if (data.server_details != null) {
                message.server_details = ServerDetails.fromObject(data.server_details);
            }
            if (data.error != null) {
                message.error = JoinError.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                acknowledgement?: ReturnType<typeof JoinAcknowledgement.prototype.toObject>;
                server_details?: ReturnType<typeof ServerDetails.prototype.toObject>;
                error?: ReturnType<typeof JoinError.prototype.toObject>;
            } = {};
            if (this.acknowledgement != null) {
                data.acknowledgement = this.acknowledgement.toObject();
            }
            if (this.server_details != null) {
                data.server_details = this.server_details.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_acknowledgement)
                writer.writeMessage(1, this.acknowledgement, () => this.acknowledgement.serialize(writer));
            if (this.has_server_details)
                writer.writeMessage(2, this.server_details, () => this.server_details.serialize(writer));
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.acknowledgement, () => message.acknowledgement = JoinAcknowledgement.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.server_details, () => message.server_details = ServerDetails.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = JoinError.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinUpdate {
            return JoinUpdate.deserialize(bytes);
        }
    }
    export class JoinAcknowledgement extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): JoinAcknowledgement {
            const message = new JoinAcknowledgement({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinAcknowledgement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinAcknowledgement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinAcknowledgement {
            return JoinAcknowledgement.deserialize(bytes);
        }
    }
    export class ServerDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            port?: number;
            player_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("player_id" in data && data.player_id != undefined) {
                    this.player_id = data.player_id;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get player_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            address?: string;
            port?: number;
            player_id?: string;
        }): ServerDetails {
            const message = new ServerDetails({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.player_id != null) {
                message.player_id = data.player_id;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                port?: number;
                player_id?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.player_id != null) {
                data.player_id = this.player_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.port != 0)
                writer.writeInt32(2, this.port);
            if (this.player_id.length)
                writer.writeString(3, this.player_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readInt32();
                        break;
                    case 3:
                        message.player_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerDetails {
            return ServerDetails.deserialize(bytes);
        }
    }
    export class JoinError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): JoinError {
            const message = new JoinError({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinError {
            return JoinError.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMatchmakerService {
        static definition = {
            GetCurrentGame: {
                path: "/matchmaker.v1.Matchmaker/GetCurrentGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCurrentGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCurrentGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCurrentGameResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCurrentGameResponse.deserialize(new Uint8Array(bytes))
            },
            JoinGame: {
                path: "/matchmaker.v1.Matchmaker/JoinGame",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: JoinGameRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JoinGameRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JoinUpdate) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JoinUpdate.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetCurrentGame(call: grpc_1.ServerUnaryCall<GetCurrentGameRequest, GetCurrentGameResponse>, callback: grpc_1.sendUnaryData<GetCurrentGameResponse>): void;
        abstract JoinGame(call: grpc_1.ServerWritableStream<JoinGameRequest, JoinUpdate>): void;
    }
    export class MatchmakerClient extends grpc_1.makeGenericClientConstructor(UnimplementedMatchmakerService.definition, "Matchmaker", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetCurrentGame: GrpcUnaryServiceInterface<GetCurrentGameRequest, GetCurrentGameResponse> = (message: GetCurrentGameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCurrentGameResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCurrentGameResponse>, callback?: grpc_1.requestCallback<GetCurrentGameResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCurrentGame(message, metadata, options, callback);
        };
        JoinGame: GrpcStreamServiceInterface<JoinGameRequest, JoinUpdate> = (message: JoinGameRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<JoinUpdate> => {
            return super.JoinGame(message, metadata, options);
        };
    }
}
