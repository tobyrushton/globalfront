// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "messages/v1/messages.proto" (package "messages.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message messages.v1.WebsocketMessage
 */
export interface WebsocketMessage {
    /**
     * @generated from protobuf field: messages.v1.MessageType type = 1
     */
    type: MessageType;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "startCountdown";
        /**
         * @generated from protobuf field: messages.v1.StartCountdown start_countdown = 2
         */
        startCountdown: StartCountdown;
    } | {
        oneofKind: "gameStart";
        /**
         * @generated from protobuf field: messages.v1.GameStart game_start = 3
         */
        gameStart: GameStart;
    } | {
        oneofKind: "joinGame";
        /**
         * @generated from protobuf field: messages.v1.JoinGame join_game = 4
         */
        joinGame: JoinGame;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message messages.v1.StartCountdown
 */
export interface StartCountdown {
    /**
     * @generated from protobuf field: int32 countdown_seconds = 1
     */
    countdownSeconds: number;
}
/**
 * @generated from protobuf message messages.v1.GameStart
 */
export interface GameStart {
}
/**
 * @generated from protobuf message messages.v1.JoinGame
 */
export interface JoinGame {
    /**
     * @generated from protobuf field: string player_id = 1
     */
    playerId: string;
}
/**
 * @generated from protobuf enum messages.v1.MessageType
 */
export enum MessageType {
    /**
     * @generated from protobuf enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
     */
    MESSAGE_TYPE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MESSAGE_START_COUNTDOWN = 1;
     */
    MESSAGE_START_COUNTDOWN = 1,
    /**
     * @generated from protobuf enum value: MESSAGE_GAME_START = 2;
     */
    MESSAGE_GAME_START = 2,
    /**
     * @generated from protobuf enum value: MESSAGE_JOIN_GAME = 3;
     */
    MESSAGE_JOIN_GAME = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketMessage$Type extends MessageType$<WebsocketMessage> {
    constructor() {
        super("messages.v1.WebsocketMessage", [
            { no: 1, name: "type", kind: "enum", T: () => ["messages.v1.MessageType", MessageType] },
            { no: 2, name: "start_countdown", kind: "message", oneof: "payload", T: () => StartCountdown },
            { no: 3, name: "game_start", kind: "message", oneof: "payload", T: () => GameStart },
            { no: 4, name: "join_game", kind: "message", oneof: "payload", T: () => JoinGame }
        ]);
    }
    create(value?: PartialMessage<WebsocketMessage>): WebsocketMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<WebsocketMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketMessage): WebsocketMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.v1.MessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* messages.v1.StartCountdown start_countdown */ 2:
                    message.payload = {
                        oneofKind: "startCountdown",
                        startCountdown: StartCountdown.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).startCountdown)
                    };
                    break;
                case /* messages.v1.GameStart game_start */ 3:
                    message.payload = {
                        oneofKind: "gameStart",
                        gameStart: GameStart.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).gameStart)
                    };
                    break;
                case /* messages.v1.JoinGame join_game */ 4:
                    message.payload = {
                        oneofKind: "joinGame",
                        joinGame: JoinGame.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).joinGame)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.v1.MessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* messages.v1.StartCountdown start_countdown = 2; */
        if (message.payload.oneofKind === "startCountdown")
            StartCountdown.internalBinaryWrite(message.payload.startCountdown, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* messages.v1.GameStart game_start = 3; */
        if (message.payload.oneofKind === "gameStart")
            GameStart.internalBinaryWrite(message.payload.gameStart, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* messages.v1.JoinGame join_game = 4; */
        if (message.payload.oneofKind === "joinGame")
            JoinGame.internalBinaryWrite(message.payload.joinGame, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.v1.WebsocketMessage
 */
export const WebsocketMessage = new WebsocketMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartCountdown$Type extends MessageType$<StartCountdown> {
    constructor() {
        super("messages.v1.StartCountdown", [
            { no: 1, name: "countdown_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartCountdown>): StartCountdown {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.countdownSeconds = 0;
        if (value !== undefined)
            reflectionMergePartial<StartCountdown>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartCountdown): StartCountdown {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 countdown_seconds */ 1:
                    message.countdownSeconds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartCountdown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 countdown_seconds = 1; */
        if (message.countdownSeconds !== 0)
            writer.tag(1, WireType.Varint).int32(message.countdownSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.v1.StartCountdown
 */
export const StartCountdown = new StartCountdown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameStart$Type extends MessageType$<GameStart> {
    constructor() {
        super("messages.v1.GameStart", []);
    }
    create(value?: PartialMessage<GameStart>): GameStart {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameStart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameStart): GameStart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameStart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.v1.GameStart
 */
export const GameStart = new GameStart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinGame$Type extends MessageType$<JoinGame> {
    constructor() {
        super("messages.v1.JoinGame", [
            { no: 1, name: "player_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinGame>): JoinGame {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = "";
        if (value !== undefined)
            reflectionMergePartial<JoinGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinGame): JoinGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_id */ 1:
                    message.playerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player_id = 1; */
        if (message.playerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.playerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.v1.JoinGame
 */
export const JoinGame = new JoinGame$Type();
