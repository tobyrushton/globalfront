/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: game/v1/game.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace game.v1 {
    export class Game extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            player_count?: number;
            max_players?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("player_count" in data && data.player_count != undefined) {
                    this.player_count = data.player_count;
                }
                if ("max_players" in data && data.max_players != undefined) {
                    this.max_players = data.max_players;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_players() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_players(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            player_count?: number;
            max_players?: number;
        }): Game {
            const message = new Game({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.player_count != null) {
                message.player_count = data.player_count;
            }
            if (data.max_players != null) {
                message.max_players = data.max_players;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                player_count?: number;
                max_players?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.player_count != null) {
                data.player_count = this.player_count;
            }
            if (this.max_players != null) {
                data.max_players = this.max_players;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.player_count != 0)
                writer.writeInt32(2, this.player_count);
            if (this.max_players != 0)
                writer.writeInt32(3, this.max_players);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Game {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Game();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.player_count = reader.readInt32();
                        break;
                    case 3:
                        message.max_players = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Game {
            return Game.deserialize(bytes);
        }
    }
}
